package com.decorate;

/**
 * 装饰设计模型
 * 1、抽象组件：需要装饰的抽象对象(接口或抽象父类)
 * 2、具体组件：需要装饰的对象
 * 3、抽象装饰类：包含了对抽象组件的引用以及装饰着共有的方法
 * 4、具体装饰类：被装饰的对象
 * @author Administrator
 *
 */
public class DecorateTest01 {
	public static void main(String[] args) {
		Coffee c = new Coffee();
		Milk m = new Milk(c);
		System.out.println(c.getInfo()+"--"+c.getCost());
		System.out.println(m.getInfo()+"--"+m.getCost());
	}

}
//1、抽象组件：需要装饰的抽象对象(接口或抽象父类)
interface Drink{
	double getCost();//价格
	String getInfo();//说明
	@Override
	String toString();
	
}
//2、具体组件：需要装饰的对象
class Coffee implements Drink{
	private String name = "原味咖啡";
	private double cost = 10d;
	@Override
	public double getCost() {
		return this.cost;
	}

	@Override
	public String getInfo() {
		return this.name;
	}
	
}
abstract class Decorate implements Drink{
	private Drink drink;
	
	public Decorate(Drink drink) {
		super();
		this.drink = drink;
	}

	@Override
	public double getCost() {
		return this.drink.getCost();
	}

	@Override
	public String getInfo() {
		return this.drink.getInfo();
	}
	
}
class Milk extends Decorate{

	public Milk(Drink drink) {
		super(drink);
	}

	@Override
	public double getCost() {
		return super.getCost()+2d;
	}

	@Override
	public String getInfo() {
		return super.getInfo()+"加入了牛奶";
	}
	

}

