package com.decorate;
import java.util.Base64;

public class DecorateTest03 {
	public static void main(String[] args) {
		Person1 p = new Person1("张三", 12);
		Athlete1 a = new Athlete1(p);
		Artist1 ar = new Artist1(p);
		System.out.println(p.getInfo());
		System.out.println(a.getInfo());
		System.out.println(ar.getInfo());
	}
	
}

//抽象组件
interface PersonInfo1{
	String getInfo(); 

	
}

//具体组件
class Person1 implements PersonInfo1{
	private String name;
	private int age;
	
	public Person1(String name, int age) {
		super();
		this.name = name;
		this.age = age;
	}

	@Override
	public String getInfo() {
		return this.name+"--"+this.age;
	}

	
}
//抽象装饰类
abstract class Skills1 implements PersonInfo1{
	Person1 p;
	
	abstract public String skill();
	public Skills1(Person1 p) {
		super();
		this.p = p;
	}

	@Override
	public String getInfo() {
		return this.p.getInfo();
	}
	
	
}
//具体装饰类
class Athlete1 extends Skills1{

	public Athlete1(Person1 p) {
		super(p);
	}

	@Override
	public String getInfo() {
		return super.getInfo()+skill();
	}
	@Override
	public String skill() {
		return "会打篮球";
	}
}
class Artist1 extends Skills1{

	public Artist1(Person1 p) {
		super(p);
	}

	@Override
	public String getInfo() {
		return super.getInfo()+skill();
	}

	@Override
	public String skill() {
		return "会弹琴唱歌";
	}
	
}